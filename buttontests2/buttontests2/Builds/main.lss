
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000750  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e99  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000023a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initIO>:
    //set input.
    uint8_t button = 3;
    uint8_t led2 = 2;
    uint8_t led = 4;
//    DDRC &= ~(1 << button);
   DDRC ^= BV(button); //set the pin 3 in DDRC as input;
  80:	97 b1       	in	r25, 0x07	; 7
  82:	28 e0       	ldi	r18, 0x08	; 8
  84:	92 27       	eor	r25, r18
  86:	97 b9       	out	0x07, r25	; 7
    DDRC |= BV(led2);
  88:	3a 9a       	sbi	0x07, 2	; 7
    DDRC |= BV(led); //set pin 4 as output
  8a:	3c 9a       	sbi	0x07, 4	; 7
    
    PORTC ^= BV(button);
  8c:	88 b1       	in	r24, 0x08	; 8
  8e:	82 27       	eor	r24, r18
  90:	88 b9       	out	0x08, r24	; 8
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	90 e0       	ldi	r25, 0x00	; 0
    
    for (int i = 0; i<5; i++) {
        PORTC |= (BV(led));//set high
        PORTC |=(BV(led2));
        _delay_ms(80);
        PORTC ^= (BV(led));
  96:	40 e1       	ldi	r20, 0x10	; 16
        PORTC ^=(BV(led2));
  98:	34 e0       	ldi	r19, 0x04	; 4
    DDRC |= BV(led); //set pin 4 as output
    
    PORTC ^= BV(button);
    
    for (int i = 0; i<5; i++) {
        PORTC |= (BV(led));//set high
  9a:	44 9a       	sbi	0x08, 4	; 8
        PORTC |=(BV(led2));
  9c:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	53 ef       	ldi	r21, 0xF3	; 243
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	50 40       	sbci	r21, 0x00	; 0
  a8:	60 40       	sbci	r22, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <initIO+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <initIO+0x2e>
  ae:	00 00       	nop
        _delay_ms(80);
        PORTC ^= (BV(led));
  b0:	28 b1       	in	r18, 0x08	; 8
  b2:	24 27       	eor	r18, r20
  b4:	28 b9       	out	0x08, r18	; 8
        PORTC ^=(BV(led2));
  b6:	28 b1       	in	r18, 0x08	; 8
  b8:	23 27       	eor	r18, r19
  ba:	28 b9       	out	0x08, r18	; 8
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	53 ef       	ldi	r21, 0xF3	; 243
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	50 40       	sbci	r21, 0x00	; 0
  c6:	60 40       	sbci	r22, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <initIO+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <initIO+0x4c>
  cc:	00 00       	nop
  ce:	01 97       	sbiw	r24, 0x01	; 1
    DDRC |= BV(led2);
    DDRC |= BV(led); //set pin 4 as output
    
    PORTC ^= BV(button);
    
    for (int i = 0; i<5; i++) {
  d0:	21 f7       	brne	.-56     	; 0x9a <initIO+0x1a>
        _delay_ms(80);
        PORTC ^= (BV(led));
        PORTC ^=(BV(led2));
            _delay_ms(80);
    }
}
  d2:	08 95       	ret

000000d4 <main>:
int main(void) {
    uint8_t button = 3;
    uint8_t led2 = 2;
    uint8_t led = 4;
    
    initIO();
  d4:	0e 94 40 00 	call	0x80	; 0x80 <initIO>
    while (1) {
        
        if(bit_is_clear(PINC, button)){ //check while true, as in grounded
            PORTC |= BV(led2);
            _delay_ms(55);
            PORTC ^= BV(led2);
  d8:	24 e0       	ldi	r18, 0x04	; 4
        }
        
        //BLINK FOR A LONG DELAY, SEE IF BUTTON IS MEASURED.  or if delay is blocking
        PORTC |= BV(led);
        _delay_ms(400);
        PORTC ^= BV(led);
  da:	90 e1       	ldi	r25, 0x10	; 16
    
    initIO();
    
    while (1) {
        
        if(bit_is_clear(PINC, button)){ //check while true, as in grounded
  dc:	33 99       	sbic	0x06, 3	; 6
  de:	16 c0       	rjmp	.+44     	; 0x10c <main+0x38>
            PORTC |= BV(led2);
  e0:	42 9a       	sbi	0x08, 2	; 8
  e2:	3f eb       	ldi	r19, 0xBF	; 191
  e4:	47 e5       	ldi	r20, 0x57	; 87
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	31 50       	subi	r19, 0x01	; 1
  ea:	40 40       	sbci	r20, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x14>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x1e>
  f2:	00 00       	nop
            _delay_ms(55);
            PORTC ^= BV(led2);
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	82 27       	eor	r24, r18
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	3f eb       	ldi	r19, 0xBF	; 191
  fc:	47 e5       	ldi	r20, 0x57	; 87
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	31 50       	subi	r19, 0x01	; 1
 102:	40 40       	sbci	r20, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x2c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x36>
 10a:	00 00       	nop
            _delay_ms(55);
        }
        
        //BLINK FOR A LONG DELAY, SEE IF BUTTON IS MEASURED.  or if delay is blocking
        PORTC |= BV(led);
 10c:	44 9a       	sbi	0x08, 4	; 8
 10e:	3f ef       	ldi	r19, 0xFF	; 255
 110:	43 ec       	ldi	r20, 0xC3	; 195
 112:	89 e0       	ldi	r24, 0x09	; 9
 114:	31 50       	subi	r19, 0x01	; 1
 116:	40 40       	sbci	r20, 0x00	; 0
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x40>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x4a>
 11e:	00 00       	nop
        _delay_ms(400);
        PORTC ^= BV(led);
 120:	88 b1       	in	r24, 0x08	; 8
 122:	89 27       	eor	r24, r25
 124:	88 b9       	out	0x08, r24	; 8
 126:	3f ef       	ldi	r19, 0xFF	; 255
 128:	44 e3       	ldi	r20, 0x34	; 52
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	31 50       	subi	r19, 0x01	; 1
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x58>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x62>
 136:	00 00       	nop
 138:	d1 cf       	rjmp	.-94     	; 0xdc <main+0x8>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
