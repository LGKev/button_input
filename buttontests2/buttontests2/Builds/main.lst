   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
 114               	.global	initIO
 116               	initIO:
   1:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** #include <stdio.h>
   2:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** #include <avr/io.h>
   3:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** #include <avr/interrupt.h>
   4:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** #include <util/delay.h>
   5:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** 
   6:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** #define BV(x) (1<<x)     // shifts bits by x. and sets the bit to 1 or 0 based on x 0 is zero shift
   7:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** #define ToggleBit(port, bit) (port ^= (1 << bit) //  toggles the bit
   8:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** 
   9:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** 
  10:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** void initIO(void) {
 118               	.LM0:
 119               	.LFBB1:
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
  11:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     //set input.
  12:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     uint8_t button = 3;
  13:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     uint8_t led2 = 2;
  14:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     uint8_t led = 4;
  15:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** //    DDRC &= ~(1 << button);
  16:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****    DDRC ^= BV(button); //set the pin 3 in DDRC as input;
 125               	.LM1:
 126 0000 97B1      		in r25,0x7
 127 0002 28E0      		ldi r18,lo8(8)
 128 0004 9227      		eor r25,r18
 129 0006 97B9      		out 0x7,r25
  17:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     DDRC |= BV(led2);
 131               	.LM2:
 132 0008 3A9A      		sbi 0x7,2
  18:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     DDRC |= BV(led); //set pin 4 as output
 134               	.LM3:
 135 000a 3C9A      		sbi 0x7,4
  19:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     
  20:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     PORTC ^= BV(button);
 137               	.LM4:
 138 000c 88B1      		in r24,0x8
 139 000e 8227      		eor r24,r18
 140 0010 88B9      		out 0x8,r24
 141 0012 85E0      		ldi r24,lo8(5)
 142 0014 90E0      		ldi r25,0
 143               	.LBB15:
  21:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     
  22:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     for (int i = 0; i<5; i++) {
  23:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC |= (BV(led));//set high
  24:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC |=(BV(led2));
  25:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         _delay_ms(80);
  26:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC ^= (BV(led));
 145               	.LM5:
 146 0016 40E1      		ldi r20,lo8(16)
  27:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC ^=(BV(led2));
 148               	.LM6:
 149 0018 34E0      		ldi r19,lo8(4)
 150               	.L2:
  23:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC |=(BV(led2));
 152               	.LM7:
 153 001a 449A      		sbi 0x8,4
  24:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         _delay_ms(80);
 155               	.LM8:
 156 001c 429A      		sbi 0x8,2
 157               	.LBB16:
 158               	.LBB17:
 160               	.Ltext1:
   1:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
   6:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
   9:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  12:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      distribution.
  16:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  17:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  21:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  33:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  35:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  38:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #  endif
  42:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  44:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #include <math.h>
  47:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  48:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /** \file */
  49:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \code
  51:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \endcode
  55:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  56:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     used.
  60:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  61:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  70:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  79:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  83:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** */
  84:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  85:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
  89:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  90:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
  97:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 103:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****     integer value.
 107:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****  */
 108:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
 110:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 111:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
 114:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 115:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #endif
 120:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 121:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** /**
 122:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 124:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 126:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 129:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 131:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 137:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 142:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 147:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    respectively.
 151:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 152:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \note
 153:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 154:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 164:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****  */
 165:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** void
 166:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** {
 168:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 176:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 179:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 182:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#else
 183:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		//round up by default
 184:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	#endif
 186:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 
 187:/usr/local/Cellar/avr-gcc/6.2.0/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 162               	.LM9:
 163 001e 2FEF      		ldi r18,lo8(127999)
 164 0020 53EF      		ldi r21,hi8(127999)
 165 0022 61E0      		ldi r22,hlo8(127999)
 166 0024 2150      	1:	subi r18,1
 167 0026 5040      		sbci r21,0
 168 0028 6040      		sbci r22,0
 169 002a 01F4      		brne 1b
 170 002c 00C0      		rjmp .
 171 002e 0000      		nop
 172               	.LBE17:
 173               	.LBE16:
 175               	.Ltext2:
  26:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC ^=(BV(led2));
 177               	.LM10:
 178 0030 28B1      		in r18,0x8
 179 0032 2427      		eor r18,r20
 180 0034 28B9      		out 0x8,r18
 182               	.LM11:
 183 0036 28B1      		in r18,0x8
 184 0038 2327      		eor r18,r19
 185 003a 28B9      		out 0x8,r18
 186               	.LBB18:
 187               	.LBB19:
 189               	.Ltext3:
 191               	.LM12:
 192 003c 2FEF      		ldi r18,lo8(127999)
 193 003e 53EF      		ldi r21,hi8(127999)
 194 0040 61E0      		ldi r22,hlo8(127999)
 195 0042 2150      	1:	subi r18,1
 196 0044 5040      		sbci r21,0
 197 0046 6040      		sbci r22,0
 198 0048 01F4      		brne 1b
 199 004a 00C0      		rjmp .
 200 004c 0000      		nop
 201 004e 0197      		sbiw r24,1
 202               	.LBE19:
 203               	.LBE18:
 205               	.Ltext4:
  22:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC |= (BV(led));//set high
 207               	.LM13:
 208 0050 01F4      		brne .L2
 209               	/* epilogue start */
 210               	.LBE15:
  28:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             _delay_ms(80);
  29:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     }
  30:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** }
 212               	.LM14:
 213 0052 0895      		ret
 215               	.Lscope1:
 216               		.section	.text.startup,"ax",@progbits
 218               	.global	main
 220               	main:
  31:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** 
  32:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c **** int main(void) {
 222               	.LM15:
 223               	.LFBB2:
 224               	/* prologue: function */
 225               	/* frame size = 0 */
 226               	/* stack size = 0 */
 227               	.L__stack_usage = 0
  33:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     uint8_t button = 3;
  34:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     uint8_t led2 = 2;
  35:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     uint8_t led = 4;
  36:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     
  37:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     initIO();
 229               	.LM16:
 230 0000 0E94 0000 		call initIO
  38:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     
  39:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****     while (1) {
  40:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         
  41:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         if(bit_is_clear(PINC, button)){ //check while true, as in grounded
  42:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             PORTC |= BV(led2);
  43:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             _delay_ms(55);
  44:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             PORTC ^= BV(led2);
 232               	.LM17:
 233 0004 24E0      		ldi r18,lo8(4)
  45:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             _delay_ms(55);
  46:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         }
  47:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         
  48:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         //BLINK FOR A LONG DELAY, SEE IF BUTTON IS MEASURED.  or if delay is blocking
  49:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC |= BV(led);
  50:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         _delay_ms(400);
  51:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         PORTC ^= BV(led);
 235               	.LM18:
 236 0006 90E1      		ldi r25,lo8(16)
 237               	.L6:
  41:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             PORTC |= BV(led2);
 239               	.LM19:
 240 0008 3399      		sbic 0x6,3
 241 000a 00C0      		rjmp .L5
  42:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             _delay_ms(55);
 243               	.LM20:
 244 000c 429A      		sbi 0x8,2
 245               	.LBB20:
 246               	.LBB21:
 248               	.Ltext5:
 250               	.LM21:
 251 000e 3FEB      		ldi r19,lo8(87999)
 252 0010 47E5      		ldi r20,hi8(87999)
 253 0012 81E0      		ldi r24,hlo8(87999)
 254 0014 3150      	1:	subi r19,1
 255 0016 4040      		sbci r20,0
 256 0018 8040      		sbci r24,0
 257 001a 01F4      		brne 1b
 258 001c 00C0      		rjmp .
 259 001e 0000      		nop
 260               	.LBE21:
 261               	.LBE20:
 263               	.Ltext6:
  44:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****             _delay_ms(55);
 265               	.LM22:
 266 0020 88B1      		in r24,0x8
 267 0022 8227      		eor r24,r18
 268 0024 88B9      		out 0x8,r24
 269               	.LBB22:
 270               	.LBB23:
 272               	.Ltext7:
 274               	.LM23:
 275 0026 3FEB      		ldi r19,lo8(87999)
 276 0028 47E5      		ldi r20,hi8(87999)
 277 002a 81E0      		ldi r24,hlo8(87999)
 278 002c 3150      	1:	subi r19,1
 279 002e 4040      		sbci r20,0
 280 0030 8040      		sbci r24,0
 281 0032 01F4      		brne 1b
 282 0034 00C0      		rjmp .
 283 0036 0000      		nop
 284               	.L5:
 285               	.LBE23:
 286               	.LBE22:
 288               	.Ltext8:
  49:/Users/kevinKuwata1/Documents/xcode/button_tests/buttontests2/buttontests2/main.c ****         _delay_ms(400);
 290               	.LM24:
 291 0038 449A      		sbi 0x8,4
 292               	.LBB24:
 293               	.LBB25:
 295               	.Ltext9:
 297               	.LM25:
 298 003a 3FEF      		ldi r19,lo8(639999)
 299 003c 43EC      		ldi r20,hi8(639999)
 300 003e 89E0      		ldi r24,hlo8(639999)
 301 0040 3150      	1:	subi r19,1
 302 0042 4040      		sbci r20,0
 303 0044 8040      		sbci r24,0
 304 0046 01F4      		brne 1b
 305 0048 00C0      		rjmp .
 306 004a 0000      		nop
 307               	.LBE25:
 308               	.LBE24:
 310               	.Ltext10:
 312               	.LM26:
 313 004c 88B1      		in r24,0x8
 314 004e 8927      		eor r24,r25
 315 0050 88B9      		out 0x8,r24
 316               	.LBB26:
 317               	.LBB27:
 319               	.Ltext11:
 321               	.LM27:
 322 0052 3FEF      		ldi r19,lo8(799999)
 323 0054 44E3      		ldi r20,hi8(799999)
 324 0056 8CE0      		ldi r24,hlo8(799999)
 325 0058 3150      	1:	subi r19,1
 326 005a 4040      		sbci r20,0
 327 005c 8040      		sbci r24,0
 328 005e 01F4      		brne 1b
 329 0060 00C0      		rjmp .
 330 0062 0000      		nop
 331 0064 00C0      		rjmp .L6
 332               	.LBE27:
 333               	.LBE26:
 335               	.Lscope2:
 336               		.text
 338               	.Letext0:
 339               		.ident	"GCC: (GNU) 6.2.0"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
/var/folders/lm/s_klhqwn77z639t7_2gx62rr0000gn/T//ccd60hYa.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/lm/s_klhqwn77z639t7_2gx62rr0000gn/T//ccd60hYa.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/lm/s_klhqwn77z639t7_2gx62rr0000gn/T//ccd60hYa.s:4      *ABS*:000000000000003f __SREG__
/var/folders/lm/s_klhqwn77z639t7_2gx62rr0000gn/T//ccd60hYa.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/lm/s_klhqwn77z639t7_2gx62rr0000gn/T//ccd60hYa.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/lm/s_klhqwn77z639t7_2gx62rr0000gn/T//ccd60hYa.s:116    .text:0000000000000000 initIO
/var/folders/lm/s_klhqwn77z639t7_2gx62rr0000gn/T//ccd60hYa.s:220    .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
