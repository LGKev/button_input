
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000690  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e7d  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000168c  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000227f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
    
    int start = 1;
    
    while(start){
        //set input.
        DDRC ^= BV(button); //set the pin 3 in DDRC as input;
  80:	48 e0       	ldi	r20, 0x08	; 8
        DDRC |= BV(led); //set pin 4 as output
        
        for (int i = 0; i<5; i++) {
            PORTC|= BV(led);//set high
            _delay_ms(500);
            PORTC ^= BV(led);
  82:	50 e1       	ldi	r21, 0x10	; 16
            _delay_ms(500);
            PORTC =BV(led2);
  84:	34 e0       	ldi	r19, 0x04	; 4
    
    int start = 1;
    
    while(start){
        //set input.
        DDRC ^= BV(button); //set the pin 3 in DDRC as input;
  86:	87 b1       	in	r24, 0x07	; 7
  88:	84 27       	eor	r24, r20
  8a:	87 b9       	out	0x07, r24	; 7
        DDRC |= BV(led2);
  8c:	3a 9a       	sbi	0x07, 2	; 7
        DDRC |= BV(led); //set pin 4 as output
  8e:	3c 9a       	sbi	0x07, 4	; 7
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	90 e0       	ldi	r25, 0x00	; 0
        
        for (int i = 0; i<5; i++) {
            PORTC|= BV(led);//set high
  94:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	64 e3       	ldi	r22, 0x34	; 52
  9a:	7c e0       	ldi	r23, 0x0C	; 12
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	60 40       	sbci	r22, 0x00	; 0
  a0:	70 40       	sbci	r23, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
            _delay_ms(500);
            PORTC ^= BV(led);
  a8:	28 b1       	in	r18, 0x08	; 8
  aa:	25 27       	eor	r18, r21
  ac:	28 b9       	out	0x08, r18	; 8
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	64 e3       	ldi	r22, 0x34	; 52
  b2:	7c e0       	ldi	r23, 0x0C	; 12
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	60 40       	sbci	r22, 0x00	; 0
  b8:	70 40       	sbci	r23, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3e>
  be:	00 00       	nop
            _delay_ms(500);
            PORTC =BV(led2);
  c0:	38 b9       	out	0x08, r19	; 8
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	60 e7       	ldi	r22, 0x70	; 112
  c6:	72 e0       	ldi	r23, 0x02	; 2
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	60 40       	sbci	r22, 0x00	; 0
  cc:	70 40       	sbci	r23, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x48>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x52>
  d2:	00 00       	nop
            _delay_ms(100);
            PORTC ^=BV(led2);
  d4:	28 b1       	in	r18, 0x08	; 8
  d6:	23 27       	eor	r18, r19
  d8:	28 b9       	out	0x08, r18	; 8
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	60 e7       	ldi	r22, 0x70	; 112
  de:	72 e0       	ldi	r23, 0x02	; 2
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	60 40       	sbci	r22, 0x00	; 0
  e4:	70 40       	sbci	r23, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x60>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x6a>
  ea:	00 00       	nop
  ec:	01 97       	sbiw	r24, 0x01	; 1
        //set input.
        DDRC ^= BV(button); //set the pin 3 in DDRC as input;
        DDRC |= BV(led2);
        DDRC |= BV(led); //set pin 4 as output
        
        for (int i = 0; i<5; i++) {
  ee:	91 f6       	brne	.-92     	; 0x94 <main+0x14>
  f0:	ca cf       	rjmp	.-108    	; 0x86 <main+0x6>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
